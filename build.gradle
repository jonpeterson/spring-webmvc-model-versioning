buildscript {
    ext {
        testSpringVersions = ['4.2.0.RELEASE', '4.3.0.RELEASE']

        // external dependency versions
        groovyVersion = '2.4.5'
        gradleVersion = '2.14.1'
        jacksonModuleModelVersioningVersion = '1.1.1'
        licensePluginVersion = '0.13.1'
        releasePluginVersion = '2.4.0'
        servletApiVersion = '3.0.1'
        slf4jVersion = '1.7.12'
        spockVersion = '1.0-groovy-2.4'
        springVersion = "[${testSpringVersions.first()},)"

        springBootVersion = '1.4.0.RELEASE'

        // external dependencies
        groovy = "org.codehaus.groovy:groovy-all:${groovyVersion}"
        jacksonModuleModelVersioning = "com.github.jonpeterson:jackson-module-model-versioning:${jacksonModuleModelVersioningVersion}"
        servletApi = "javax.servlet:javax.servlet-api:${servletApiVersion}"
        slf4jFromJcl = "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        slf4jFromLog4j = "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
        slf4jSimple = "org.slf4j:slf4j-simple:${slf4jVersion}"
        spockCore = "org.spockframework:spock-core:${spockVersion}"
        spockSpring = "org.spockframework:spock-spring:${spockVersion}"
        springWebMvc = "org.springframework:spring-webmvc:${springVersion}"
        springTest = "org.springframework:spring-test:${springVersion}"

        springBootStarterJetty = "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}"
        springBootStarterTest = "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        springBootStarterWeb = "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:${licensePluginVersion}"
        classpath "net.researchgate:gradle-release:${releasePluginVersion}"
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = this.gradleVersion
}


group = 'com.github.jonpeterson'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'net.researchgate.release'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile jacksonModuleModelVersioning
    compile springWebMvc

    testCompile groovy
    testCompile servletApi
    testCompile slf4jFromJcl
    testCompile slf4jFromLog4j
    //testCompile slf4jSimple
    testCompile spockCore
    testCompile spockSpring
    testCompile springTest

    testCompile springBootStarterJetty
    testCompile springBootStarterWeb
    testCompile springBootStarterTest
}

license {
    include '**/*.java'
    include '**/*.groovy'
    mapping {
        java = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
    }
}

// don't run tests with default test task
test.excludes = ['**/*']

// dynamically set up test executions for each version of Spring
testSpringVersions.each { version ->
    def safeVersion = version.replaceAll('\\.', '_')

    configurations {
        "testSpring${safeVersion}Compile" {
            extendsFrom testCompile
        }
        "testSpring${safeVersion}Runtime" {
            extendsFrom testRuntime
            resolutionStrategy {
                force springWebMvc.replace(springVersion, version)
                force springTest.replace(springVersion, version)
            }
        }
    }

    sourceSets{
        it."testSpring$safeVersion" {
            compileClasspath += sourceSets.main.output + sourceSets.test.output
            runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        }
    }

    task "testSpring$safeVersion"(type: Test) {
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets."testSpring$safeVersion".runtimeClasspath
        ignoreFailures = true
    }

    test.dependsOn "testSpring$safeVersion"
}


task javadocJar(type: Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

build {
    dependsOn javadocJar
    dependsOn sourcesJar
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    def ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : null
    def ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : null

    doFirst {
        if(!ossrhUsername || !ossrhPassword)
            throw new MissingPropertyException('ossrhUsername or ossrhPassword not set')
    }

    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Spring MVC Model Versioning'
                packaging 'jar'
                description 'Spring MVC binding for using Jackson Model Versioning Module.'
                url 'https://github.com/jonpeterson/spring-webmvc-model-versioning'

                scm {
                    connection 'scm:git:git://github.com/jonpeterson/spring-webmvc-model-versioning.git'
                    developerConnection 'scm:git:git@github.com:jonpeterson/spring-webmvc-model-versioning.git'
                    url 'https://github.com/jonpeterson/spring-webmvc-model-versioning'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'jonpeterson'
                        name 'Jonathan Peterson'
                        email 'jonathan.p.peterson@gmail.com'
                        url 'https://github.com/jonpeterson'
                    }
                }
            }
        }
    }
}